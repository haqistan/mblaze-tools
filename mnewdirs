#!/usr/bin/env perl
##
# find maildirs with new messages by default spit out lines like this:
#     dir count
# in this form dir will have /new at the end
# if the -n option is specified, we instead spit out:
#     maildir
# which is just dirname $dir
#
# we normally ignore folders whose names end with -a-<yyyy>-<mm>-<dd>
# (e.g. BankMail-a-2021-01-01) so that this convention can be used to
# name archive folders that should not normally be displayed.  use the
# -a option to disable this and display all folders with new mail
##
use strict;
use warnings;
use File::Basename;
use File::Find;
use Getopt::Std;

our %newdirs = (); # dir => #files
our %opts;
our $MBLAZE = $ENV{'MBLAZE'} || join('/',$ENV{'HOME'},'.mblaze');

sub mhdr {
	open(MHDR, "mhdr -h $_[0] $MBLAZE/profile |")
		or die "mhdr: $!";
	my $val = <MHDR>;
	close(MHDR);
	chomp($val) if $val;
	return $val // $_[1];
}

our $maildir = mhdr("MaildirBase") || $ENV{'MAILDIR'} ||
	join('/',$ENV{'HOME'},'mail');
$maildir = $ENV{"HOME"}."/Maildir" unless -d $maildir;
die "no maildir and no MAILDIR set!?\n" unless -d $maildir;
our $archive_regexp = mhdr("ArchiveRegexp",'-a-\d{4}-\d{2}-\d{2}');
our $archive_re = qr/$archive_regexp/;
our $spam_regexp = mhdr("SpamFolderRegexp",'^Spam.*');
our $spam_re = qr/$spam_regexp/;
our @newdirs_list = map { ($_ !~ m,^/,)?"${maildir}/$_":"$_" } split(/\s*,\s*/,mhdr("NewMailFolderList","$maildir"));
#warn("# newdirs_list: @newdirs_list\n");
our $total_msgs = 0;

sub check {
	return undef unless $opts{'a'} ||
		$File::Find::dir =~ $spam_re ||
		$File::Find::dir !~ $archive_re;
	if ($File::Find::name =~ /\/new\/\d+\.\d+_\d+.*$/) {
		++$total_msgs;
		$newdirs{$File::Find::dir}++;
	}
}

sub mungdir {
	my($dir) = @_;
	if (!$opts{'n'}) {
		$dir =~ s,^${maildir}/,,;
	}
	return dirname($dir);
}

# main program

getopts('anto',\%opts);
our $fmt = $opts{'n'} ? "%s\n" : "%s %d\n";
@newdirs_list = () if $opts{'o'};
unshift(@newdirs_list,@ARGV);
find(\&check,@newdirs_list);
if ($opts{t}) {
	print "$total_msgs\n";
	exit(0);
}
foreach (sort keys %newdirs) {
	my @out = (mungdir($_));
	push(@out, $newdirs{$_}) unless $opts{'n'};
	printf($fmt,@out);
}
