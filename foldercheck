#!/bin/ksh

# I run this in a small pane in my tmux mail window.  I resize it
# sometimes so it must conform itself to its current size to look
# respectable.

ORIG_CMD="$0 $*"

MBLAZE=${MBLAZE-$HOME/.mblaze}
profile="$MBLAZE/profile"

date_fmt=$(mhdr -h FolderCheckDateFmt $profile)
[ -z "$date_fmt" ] && date_fmt="%Y-%m-%d %H:%M"
sleep=$(mhdr -h FolderCheckSleep $profile)
[ -z "$sleep" ] && sleep=30
default_sleep=$sleep

TEMPFILES=""
CUR_MSG=""
CUR_MSG_Y=""
siginfo=""

if [ $# -gt 0 ]; then
	sleep=$1
	shift
fi

# bsd polyfill
case $(uname) in
	*BSD)	netstat="netstat -na -f inet"
		[ -z "$siginfo" ] && siginfo="INFO"
		stty_size_field () {
			stty -a | perl -lne '/(\d+)\s+'$1'/ && print $1'
		}
		colorer=color_a
		setaf=setaf
		setab=setab
		;;
	*)	netstat="netstat -na4"
		stty_size_field () {
			stty -a | perl -lne '/'$1'\s+(\d+);/ && print $1'
		}
		colorer=color_
		setaf=setf
		setab=setb
		;;
esac
cursor_invis=true
cursor_vis=true
if tput civis >/dev/null; then
	cursor_invis="tput civis"
	cursor_vis="tput cnorm"
fi

tty_rows () {
	echo $(stty_size_field rows)
}

tty_cols () {
	echo $(stty_size_field columns)
}

mung_colors () {
	local bg=$1
	if [ -n "$bg" ]; then
		tput $setaf $fg
		tput $setab $bg
	fi
}

center_msg () {
	local str="$*" w=$(tty_cols) h=$(tty_rows) x y mid_len
	if [ -n "$CUR_MSG" ]; then
		# erase previous message
		tput cup $CUR_MSG_Y 0
		echo -n "$(blanks $w)"
	fi
	mid_len=${#str}
	mid_len=$(expr $mid_len / 2)
	y=$(expr $h / 2)
	if [ $h -gt 3 ]; then
		y=$(expr $y - 1)
	fi
	x=$(expr $w / 2)
	x=$(expr $x - $mid_len)
	tput cup $y $x
	tput bold
	echo -n "$str"
	tput sgr0
	CUR_MSG="$str"
	CUR_MSG_Y=$y
}

color_a () {
	# N.B. this is for seta[fb] c.f. terminfo(5)
	local c n=$(echo $1 | tr A-Z a-z)
	case $n in
		black)	c=0 ;;
		red)	c=1 ;;
		green)	c=2 ;;
		yellow) c=3 ;;
		blue)	c=4 ;;
		magenta)c=5 ;;
		cyan)	c=6 ;;
		white)	c=7 ;;
		*) die "wtf color is $1 ?" ;;
	esac
	echo $c
}

color_ () {
	# N.B. this is for set[fb] c.f. terminfo(5)
	local c n=$(echo $1 | tr A-Z a-z)
	case $n in
		black)	c=0 ;;
		blue)	c=1 ;;
		green)	c=2 ;;
		cyan)	c=3 ;;
		red)	c=4 ;;
		magenta)c=5 ;;
		yellow)	c=6 ;;
		white)	c=7 ;;
		*) die "wtf color is $1 ?" ;;
	esac
	echo $c
}

blanks () {
	perl -e "print ' ' x $1"
}

blank_screen () {
	local rows=$(tty_rows) cols=$(tty_cols) bgc=$1
	local one_row=$(blanks $cols) row=0
#	debug "blank_screen colorer $colorer $1: $setaf $fg $setab $bg"
	tput clear
	while [ $row -lt $rows ]; do
		echo -n "$one_row"
		row=$(expr 1 + $row)
	done
}

################################################

remember_tempfile () {
	local fn=$1
	case $TEMPFILES in
		*${fn}*) ;;
		*) TEMPFILES="${TEMPFILES} $fn" ;;
	esac
}

forget_tempfile () {
	local fn=$1
	TEMPFILES=$(echo $TEMPFILES | perl -lpe "s,${fn},,gs; s,^\s+,,; s,\s+\$,,;")
}

ts () {
	date +"$date_fmt"
}

debug () {
	echo "$(ts) DEBUG: $*" 1>&2
}

count_file_lines () {
	wc -l $1 | awk '{print $1}'
}

# ticker-tape-style file display in a potentially small window
# if the output of rs doesn't fit nicely in the window, we
# scroll it slowly down and then back up.
# note: all this tput'ery works in a small tmux pane on OpenBSD, which
# is where I run this... YMMV

had=0
display_file () {
	local fn=$1 cols=$(tty_cols) rows=$(tty_rows) n=0 rs nlines thee_sleep=$sleep
	[ -z "$cols" ] && cols=$COLUMNS
	[ -z "$rows" ] && rows=$ROWS
	tput clear
	nlines=$(count_file_lines $fn)
	if [ $nlines -eq 0 ]; then
		center_msg '~no mail~'
		had=0
		return 0
	fi
	had=1
	rs=${fn}.rs.txt
	rs -e -w$cols <$fn >$rs
	remember_tempfile $rs
	n=$(count_file_lines $rs)
	# suss out title
	local title="~ $nlines w/new mail ~" mid_len x
	mid_len=${#title}
	mid_len=$(expr $mid_len / 2)
	x=$(expr $cols / 2)
	x=$(expr $x - $mid_len)
	if [ $x -gt 0 ]; then
		x=$(expr $x - 1)
		title=$(printf %${x}s%s " " "$title")
	fi
	# looks purty
	tput bold
	echo "$title"
	# sgr0=cancel effects(bold), sc=save position
	tput sgr0 sc
	if [ $n -lt $(expr $rows - 1) ]; then
		cat $rs
	else
		local rm1=$(expr $rows - 2) r=0
		local last=$(expr $n - $rm1)
		# scroll the list forward slowly
		while [ $r -le $last ]; do
			# rc=return to saved position
			# ed=clear to end of screen
			tput rc ed
			if [ $r -eq 0 ]; then
				head -$rm1 $rs
			else
				sed -e "1,${r}d" <$rs | head -$rm1
			fi
			sleep 2
			thee_sleep=$(expr $thee_sleep - 2)
			r=$(expr $r + 1)
		done
		sleep 1 # pause between
		thee_sleep=$(expr $thee_sleep - 1)
		r=$(expr $r - 1)
		while [ $r -ge 0 ]; do
			tput rc ed
			if [ $r -eq 0 ]; then
				head -$rm1 $rs
			else
				sed -e "1,${r}d" <$rs | head -$rm1
			fi
			sleep 2
			thee_sleep=$(expr $thee_sleep - 2)
			r=$(expr $r - 1)
		done
		case $thee_sleep in
			-*) thee_sleep="" ;;
			*)
				if [ $thee_sleep -gt 5 ]; then
					thee_sleep=2
				fi
				;;
		esac
	fi
	forget_tempfile $rs
	rm -f $rs
	sleep=$thee_sleep
}

first_time=1
check () {
	local cols tmpf=$1
	cols=$(tty_cols)
	[ -z "$cols" ] && cols=$COLUMNS
	if [ $had -eq 0 ]; then
		if [ $first_time -eq 1 ]; then
			blank_screen
			first_time=0
		fi
		center_msg '~looking...~'
	fi
	mnewdirs > ${tmpf}
	if [ ! -s "$tmpf" ]; then
		tput clear
		center_msg '~no unread mail~'
		had=0
		sleep=$default_sleep
	else
		display_file $tmpf
	fi
}

sleeper_pid=0

shleep () {
	local secs=$1
	sleep $secs & sleeper_pid=$!
	wait $sleeper_pid 2>/dev/null
	sleeper_pid=0
}

wakeup () {
	[ $sleeper_pid -ne 0 ] && \
		kill $sleeper_pid >/dev/null 2>&1 && \
		wait $sleeper_pid
	sleep=0
}

restart () {
	tput clear sgr0 cvvis
	exec $ORIG_CMD
}

interrupted () {
	wakeup
	if [ -n "$TEMPFILES" ]; then
		echo "$(ts) cleaning up tempfiles: $TEMPFILES"
		rm -rf $TEMPFILES
	fi
	rm -f ${tmpf}
	tput sgr0 cvvis
	echo ''
	echo "$(ts) exiting ..."
	exit 1
}

trap 'interrupted' INT TERM
trap 'wakeup; restart' WINCH QUIT
[ -n "$SIGINFO" ] && trap 'wakeup; restart' $SIGINFO

tmpf=${TMPDIR-/tmp}/foldercheck.$$

while true; do
	check $tmpf
	[[ -n "$sleep" ]] && shleep $sleep
	sleep=$default_sleep
done
