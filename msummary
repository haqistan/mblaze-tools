#!/usr/bin/env perl

# msummary - summarize a single message on stdin

use strict;
use warnings;
use POSIX qw(strftime);
use Time::ParseDate;
use Term::ANSIColor;

our $COLORED = $ENV{'MSUMMARY_COLOR'} ? int($ENV{'MSUMMARY_COLOR'}) : 1;
our $MAXSUBJ = 0;

our $hdr = '';
our $interesting = qr/^(from|to|cc|date|subject|x-spam-flag|list-id)$/i;
our $something = 0;
our %all;

our @now = localtime(time);
our $midnight = parsedate(strftime("%Y-%m-%d 00:00:00",@now));
our $thisyear = parsedate(strftime("%Y-01-01 00:00:00",@now));

sub clean {
	my($str) = @_;
	$str =~ s/^\s+//;
	$str =~ s/\s+$//;
	$str =~ s/\s+/ /gs;
	return $str;
}

sub parse {
	if ($hdr !~ /^([^:]+?):\s*(\S.*)$/) {
		warn("MALFORMED: $hdr\n");
	} else {
		my($n,$v) = ($1,$2);
		if ($n =~ $interesting) {
			$n = lc($n);
			if ($all{$n}) {
				$all{$n} .= ",$v";
			} else {
				$all{$n} = $v;
			}
			++$something;
		}
	}
	$hdr = '';
}

sub docolor { $COLORED ? color(@_) : '' }

sub printsumm {
	my $spam = '';
	if ($all{'x-spam-flag'} && ($all{'x-spam-flag'} eq 'YES')) {
		$spam = docolor('red').'*'.docolor('reset').' ';
	}
	my $list = '';
	if ($all{'list-id'}) {
		my $lid = $all{'list-id'};
		$lid = $1 if $lid =~ /^.*<([^>]+)>$/;
		$list = docolor('yellow')."[$lid]".docolor('reset').' ';
	}
	my $rawdate = $all{'date'};
	my $t = parsedate($rawdate) || 0;
	my $tfmt = "%H:%M";
	if ($t < $midnight) {
		$tfmt = "%d %b %H:%M";
		if ($t < $thisyear) {
			$tfmt = "%d %b %Y %H:%M";
		}
	}
	my $d = strftime($tfmt,localtime($t));
	my $date = docolor('bold blue')."$d ".docolor('reset');
	my $from = $all{'from'} ?
	    docolor('green').$all{'from'}.docolor('reset') :
	    docolor('red').'?'.docolor('reset');
	my $to = '?';
	if ($all{'to'} || $all{'cc'}) {
		$to = $all{'to'} || '';
		if ($all{'cc'}) {
			$to .= ',' if $to;
			$to .= $all{'cc'};
		}
	}
	my $subj = $all{'subject'};
	if ($MAXSUBJ && (length($subj) > $MAXSUBJ)) {
		$subj = substr($subj,0,$MAXSUBJ)." ...";
	}
	$subj = '-no subject-' unless $subj;
	$subj = docolor('bold green').$subj.docolor('reset');
	my $cont = '';
	$cont = docolor('magenta').' ... '.$all{'_content'}.docolor('reset')
	    if exists $all{'_content'};
	print STDERR "${date}${spam}${list}${from} -> ${to}: ${subj}${cont}\n";
}

sub summ {
	my($fh) = @_;
	while (defined(my $line = <$fh>)) {
		$line =~ s/\n+$//;
		last if $line =~ /^\s*$/;
		parse() if $hdr && $line =~ /^(\S[^:]+):\s*(\S.*)$/;
		$line =~ s/^[\t\s]+/ /;
		$hdr .= $line;
	}
	parse() if $hdr;
	if ($all{'list-id'} &&
	    ($all{'list-id'} =~ /.*-changes\.openbsd\.org/)) {
		# OpenBSD CVS change log emails
		my($module,$mod,@mods,$in_mods,@dirs,$nfiles,$summstr);
		$nfiles = 0;
		while (defined(my $line = <$fh>)) {
			chomp($line);
			if ($line =~ /^Module\sname:\s+(\S.*)$/) {
				$module = $1;
			} elsif ($line =~ /^(Modified|Removed)\sfiles:/) {
				$mod = substr(lc($1),0,3);
				push(@mods,$mod);
				$in_mods = 1;
			} elsif ($line =~ /^Log\smessage:/) {
				if (!$in_mods) {
					# import
					$line = <$fh> || ''; # next line
					$line = clean($line);
					$summstr = $line;
					last;
				} # else it's a log message farther down, ignore
			} elsif ($in_mods) {
				my @parts = map { clean($_) } split(/:/, $line);
				if (@parts == 2) {
					push(@dirs,shift(@parts));
				}
				if (@parts) {
					my @f = split(/\s+/,$parts[0]);
					$nfiles += scalar(@f);
				}
			} # else ignore it
		}
		my $filez = ($nfiles == 1) ? "file": "files";
		my $ndirs = scalar(@dirs);
		my $dirz = ($ndirs == 1) ? "dir": "dirs";
		my $summ = '';
		$summ .= '<'.join(",",@mods).'> ';
		$summstr ||= "$nfiles $filez in $ndirs $dirz: @dirs";
		$all{'_content'} = $summ . $summstr;
	}
	printsumm() if $something;
}

summ(\*STDIN);
